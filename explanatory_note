Весь основной код лежит в фале main.py. В нем можно выделить 3 основные части.
1 - с 1 по 56 строки: Иморт билиотек, инициализация Flask, задание необходимых для работы констант, подключение БД, от-
лавливание ошибок.
2 - с 56 по 400 - Логика всех страниц, реализованных в приложении, написанная с помощью Flask. Название фунцкии обычно
совпадает с адресом страницы, за которую она отвечает. Например, за страницу /create_quiz отвечает функция create_quiz.
Важно, что для многих страниц необходимы формы. Чаще всего в коде они находятся рядом с функциями, их обрабатывающими и
схоже называются. Пример: с 288 по 311 строку идет обработка адреса /create_quiz, для которой необходима форма. Она на -
ходится на строках 281 - 284.
3 - 404 - 408 работа с задачами по раписанию и запуск приложения.
Есть 2 задачи по раписанию:
1 - Удалять раз в минуту ненужные файлы (те, что отправляются на скачивание). Их название начинается с send.
2 - Работа с ежедненым соревнованием. Раз в 24 часа вызывается функция update_info, обновляющая список вопросов
(daily.json) и очищающая список участников (participants.txt)

В файле generate_questions.py реализован запрос к api jservice.io. В нем есть 2 функции.
1 - def get_question(quantity): возвращает список случайных вопросов в формате [[question, answer], [question, answer]]
длиной quantity (по умолчанию 1).
2 - def get_question_with_params(quantity, value): возвращает список вопросов стоимостью value в формате
[[question, answer], [question, answer]] длиной quantity.
Эти функции вызываются из файла main.py.

В папке db находится база данных с названием blogs.db. База данных состоит из 2 таблиц: users и posts. Структура таблиц
описана в документации к файлам users.py и posts.py

В папке data лежат 4 файла:
1 - __all_models.py - для настройки ORM модели
2 - db_session.py - для настройки ORM модели
3 - posts.py - модель постов. Формат: id (integer, primary_key, autoincrement); author_id(integer); title (string);
content (string); created_date(DateTime, default=datetime.datetime.now)
4 - user.py - модель пользователей. Формат: id (integer, primary_key, autoincrement); surname (string); name (string);
age (integer); email(string); rating (integer); check_password (string). Важно: rating - рейтинг в ежедневых соревнова -
ниях, check_password - пароль, хранится зашифрованным.

В папке templates лежать html страницы. Базовой, от которой наследуются многие является base.html, она включает в себя
верхнюю полоску (моя страница, выйти, создать квиз). Файлы назваются или схоже с адресами страниц или осмысленно.
Пример: my_page.html - шаблон моей странички. user_page.html - страницы другого пользователя.

В папке static находятся картинка удаления поста (delete1.png), файл с ежедневным соревнованием (day.json), список уча -
стников ежедневного соревнования за сегодня (participants.txt), директория avatar (в ней под номерами, соответствующими
id находятся аватарки пользователей; те фото пользователя с id 1 находится по пути /static/avatar/1.jpg)

В файле requirements.txt перечислены необходимые билиотеки с версиями.

start.sh - файл для запуска на glitch.com


Ежедневное соревнование состоит из 10 вопросов, с повышающейся стоимостью (100, 200, 300 ... 1000). После отправки про -
веряется корректность ответа и начисляются баллы.
